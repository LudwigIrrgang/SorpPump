function [T, p, h, m, w, eta, Q, PP, A, s] = AHP(T,HX,Q,s,eta)
%% Absorption Heat Pump
% Calculates internal and external state points of:
% - Single effect
% - Double effect (serial/ parallel)
% - Double lift
% Absorption chiller with the following working fluids:
% - Lithium bromide/ water
% - Water/ ammonia
% Make sure that all necessary functions can be called correctly
% See run_AHP.m for example code
% ----------------------------------------------------------------------- %
%{
Author  : Ludwig Irrgang
Date    : 09.01.2023
Copyright information:
Ludwig Irrgang
Lehrstuhl f체r Energiesysteme
TUM School of Engineering and Design
Technische Universit채t M체nchen
Boltzmannstr. 15 
85748 Garching b. M체nchen
ludwig.irrgang@tum.de
The distibution of this script and all incoperated models is not permitted
without permission of the owner.
%}
% ----------------------------------------------------------------------- %
%% Necessary inputs
% Temperatures
%{
-   T.ext_des_in        (Heat source temperature)
-   T.ext_evap_out      (Cold output temperature)
-   T.ext_evap_in       (Inlet temperature of cold )
-   T.ext_abs_in        (Heat sink temperature at absorber)
-   T.ext_cond_in       (Heat sink temperature at condenser)
%}
% Approach temperatures
%{
-   HX.T_PP_evap        (Evaporator approach temperature)
-   HX.T_PP_abs         (Absorber approach temperature)
-   HX.T_PP_des         (Desorber approach temperature)
-   HX.T_PP_cond        (Condenser approach temperature)
-   HX.T_PP_SHEX        (Solution heat exchanger approach temperature)
-   HX.T_PP_SHEXI       (Solution heat exchanger approach temperature)
-   HX.T_PP_RHEX        (Refrigerant heat exchanger approach temperature)
-   HX.T_PP_cond_int    (Evaporation approach temperature)
-   HX.SC_cond          (Subcooling at condenser)
-   HX.dT_ref_des       (Difference between solution and refrigerant desober exit temperatures)
-   HX.dT_ref_desI      (Difference between solution and refrigerant desoberI exit temperatures)
%}
% Model setup
%{
-   s.requirement       (Use 'Q_evap' for cold output/ 'Q_des' for heat input)
-   Q.dec               (Amount of cold outpur/ heat input)
-   s.configuration     (Configuration - Use 'Base', 'Double_effect', 'Double_effect_serial', 'Double_lift', 'LP_comp_base',
                        'HP_comp_base', 'Cascade_base_comp') 
-   s.refrigerant       (Refrigerant - Use 'AMMONIA' or 'WATER')
-   s.CC_refrigerant    (Refrigerant for compression chiller - Use a refrigerant which is supported by Coolprop)
-   s.plot_Duhring      (Cycle plot - Use 1 if you want to plot the pT diagram)
-   s.plot              (Heat exchanger plot - Use 1 to plot HX TQ diagrams)
-   s.delta_w           (Minimal difference in concentration between solution flows)
-   s.comp_active = 0;  (Necessary for model - do not change)
-   s.abs_active = 1;   (Necessary for model - do not change) 
%}
% Compressor Model Setup - documented in MA Frohnwieser 2023
% The compressor setup is only used if the hybrid model 'LP_comp_base' or 'HP_comp_base' is used
%{
% 
-   s.givenCompRatio    (Decides if compression ratio is given or should be calculated - use 0 if ratio should be calculated)
-   s.ratioComp         (Predifined compression ratio for hybrid cycles)
-   s.CompModel         (Defines whether the compressor model is used or a fixed isentropic efficiency is assumed - use 1 for usage of compressor model)
-   s.Comp.D_1h         (Compressor hub diameter)
-   s.Comp.D_1t         (Compressor tip diameter)
-   s.Comp.D_2          (Compressor outlet diameter)
-   s.Comp.b_2          (Compressor outlet gap)
-   s.Comp.D_3          (Diffusor inlet diameter)
-   s.Comp.z_1          (Impeller balde number)
-   s.Comp.z_2          (Additional impeller blades)
-   s.Comp..beta_LE     (Leading edge angle)
-   s.Comp.beta_TE      (Trailing edge angle)
-   s.Comp.alpha_Dif    (Angle difference impeller/diffusor)
%}
% Efficiencies
%{
-   eta.pump            (Efficiency of pump in solution circuit)
-   eta.comp            (Radial compressor isentropic efficiency in hybrid cycle - if Compressor Model is not used)
-   eta.CC_comp         (Isentropic efficiency for compression chiller model)
%}
% ----------------------------------------------------------------------- %
%% Initialize Structs
h(1) = struct();
m(1) = struct();
p(1) = struct();
% ----------------------------------------------------------------------- %
%% Define internal model input 
% Evaporator
T.evap = T.ext_evap_out - HX.T_PP_evap;
% Absorber
T.sol_abs_out = T.ext_abs_in + HX.T_PP_abs;
% Desorber
T.sol_des_out = T.ext_des_in - HX.T_PP_des;
% Condenser
T.cond = T.ext_cond_in + HX.T_PP_cond + HX.SC_cond;
% Specific values for configuration
switch s.configuration
    case 'Double_effect'
        % Internal condenser
        T.cond_int = T.cond + HX.dT_ref_des + HX.T_PP_cond_int; % 5K since refrigerant leaves desorber 5 K below desorber exit temperature
        % Upper pressure desorber
        T.sol_des_outI = T.sol_des_out;
        % Middle pressur desorber
        T.sol_des_out = T.cond_int - HX.T_PP_cond_int;
    case 'Double_effect_serial'
        % Internal condenser
        T.cond_int = T.cond + HX.dT_ref_des + HX.T_PP_cond_int; % 5K since refrigerant leaves desorber 5 K below desorber exit temperature
        % Upper pressure desorber
        T.sol_des_outI = T.sol_des_out;
        % Middle pressur desorber
        T.sol_des_out = T.cond_int - HX.T_PP_cond_int;
    case 'Double_lift'
        % Upper pressure desorber
        T.sol_des_outI = T.sol_des_out;
        % Middle pressure absorber
        T.sol_abs_outI = T.sol_abs_out;
    otherwise
end
% ----------------------------------------------------------------------- %
%% Calculation
switch s.configuration
% ----------------------------------------------------------------------- %
% -------------------------- Base Model --------------------------------- %
% ----------------------------------------------------------------------- %
    case 'Base'
        %% Calculate absorption machine internals
        switch s.refrigerant
            case 'WATER'
                [T, p, h,  m, w, eta, Q, PP, s] = base_model_H2OLiBr(T,p,h,m,eta,Q,HX,s);
            case 'AMMONIA'
                [T, p, h,  m, w, eta, Q, PP, s] = base_model_NH3H2O(T,p,h,m,eta,Q,HX,s);
            otherwise
                error('Refrigerant not available, use WATER or AMMONIA')
        end
% ----------------------------------------------------------------------- %
% ---------------------- Double Effect Model ---------------------------- %
% ----------------------------------------------------------------------- %
    case 'Double_effect'
        %% Calculate absorption machine internals
        switch s.refrigerant
            case 'WATER'
                [T, p, h, m, w, eta, Q, PP, s] = doubleEffect_model_H2OLiBr(T,p,h,m,eta,Q,HX,s);
            case 'AMMONIA'
                [T, p, h, m, w, eta, Q, PP, s] = doubleEffect_model_NH3H2O(T,p,h,m,eta,Q,HX,s);
            otherwise
                error('Refrigerant not available, use WATER or AMMONIA')
        end
% ----------------------------------------------------------------------- %
% ------------------- Double Effect Serial Model ------------------------ %
% ----------------------------------------------------------------------- %
    case 'Double_effect_serial'
        %% Calculate absorption machine internals
        switch s.refrigerant
            case 'WATER'
                [T, p, h, m, w, eta, Q, PP, s] = doubleEffectSerial_model_H2OLiBr(T,p,h,m,eta,Q,HX,s);
            case 'AMMONIA'
                [T, p, h, m, w, eta, Q, PP, s] = doubleEffectSerial_model_NH3H2O(T,p,h,m,eta,Q,HX,s);
            otherwise
                error('Refrigerant not available, use WATER or AMMONIA')
        end
        A(1) = struct();
% % ----------------------------------------------------------------------- %
% % ------------------------ Double Lift Model ---------------------------- %
% % ----------------------------------------------------------------------- %
    case 'Double_lift'
        %% Calculate absorption machine internals
        switch s.refrigerant
            case 'WATER'
                [T, p, h, m, w, eta, Q, PP, s] = doubleLift_model_H2OLiBr(T,p,h,m,eta,Q,HX,s);
            case 'AMMONIA'
                [T, p, h, m, w, eta, Q, PP, s] = doubleLift_model_NH3H2O(T,p,h,m,eta,Q,HX,s);
            otherwise
                error('Refrigerant not available, use WATER or AMMONIA')
        end
    otherwise 
        error('Configuration not available')
end
%% Additional Plots
if s.plot_Duhring == 1 && s.refrigerant == "WATER"
    LiBr_pTDiagram(T, p, s);
elseif s.plot_Duhring == 1 && s.refrigerant == "AMMONIA"
    NH3_pTDiagram(T, p, s);
end
end
